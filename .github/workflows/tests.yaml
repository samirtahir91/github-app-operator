name: Tests

# Trigger the workflow on pull requests and direct pushes to any branch
on:
  push:
  pull_request:

jobs:
  test:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    # Pull requests from the same repository won't trigger this checks as they were already triggered by the push
    if: (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Clone the code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '~1.22'
      - name: Setup Kubernetes Cluster in Docker Environment
        uses: medyagh/setup-minikube@latest
      # This step is needed as the following one tries to remove
      # kustomize for each test but has no permission to do so
      - name: Remove pre-installed kustomize
        run: sudo rm -f /usr/local/bin/kustomize
      # Install vault to minikube cluster to test vault case with kubernetes auth
      - name: Install Vault
        env:
            GITHUB_PRIVATE_KEY: ${{ secrets.GH_TEST_APP_PK }}
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
       
          # install vault with single node
          helm install vault hashicorp/vault --values test/helm-vault-raft-values.yml
          kubectl get pods
       
          # wait for vault to run
          until kubectl get pod vault-0 -o=jsonpath='{.status.phase}' | grep -q "Running"; do sleep 5; done
         
          # get cluster keys
          kubectl exec vault-0 -- vault operator init \
            -key-shares=1 \
            -key-threshold=1 \
            -format=json > cluster-keys.json
         
          # set unseal key
          VAULT_UNSEAL_KEY=$(jq -r ".unseal_keys_b64[]" cluster-keys.json)
         
          # unseal vault
          kubectl exec vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY
        
          # wait for vault to be ready
          kubectl wait --for=condition=ready pod/vault-0 --timeout=300s
        
          # get root token
          VAULT_ROOT_TOKEN=$(jq -r ".root_token" cluster-keys.json)
        
          # login
          kubectl exec -i vault-0 -- vault login -non-interactive ${VAULT_ROOT_TOKEN}
         
          # enable kv-v2
          kubectl exec -i vault-0 -- vault secrets enable -path=secret kv-v2
         
          # write github app secret
          kubectl exec -i vault-0 -- vault kv put secret/githubapp/test privateKey="${GITHUB_PRIVATE_KEY}"
         
          # enable k8s auth
          kubectl exec -i vault-0 -- vault auth enable kubernetes
          
          # get k8s host
          KUBERNETES_HOST=$(kubectl exec -i vault-0 -- sh -c 'echo $KUBERNETES_SERVICE_HOST')
          
          # write k8s host
          kubectl exec -i vault-0 -- vault write auth/kubernetes/config kubernetes_host="https://$KUBERNETES_HOST:443"
          
          # write vault policy
          kubectl exec -i vault-0 -- sh -c 'vault policy write githubapp - <<EOF
          path "secret/data/githubapp/test" {
            capabilities = ["read"]
          }
          EOF'
          
          # write vault role
          kubectl exec -i vault-0 -- sh -c 'vault write auth/kubernetes/role/githubapp \
              bound_service_account_names="default" \
              bound_service_account_namespaces="namespace0" \
              policies=githubapp \
              ttl=24h'
      - name: Perform the test
        run: |
          export "GITHUB_PRIVATE_KEY=${{ secrets.GH_TEST_APP_PK }}"
          export "GH_APP_ID=${{ secrets.GH_APP_ID }}"
          export "GH_INSTALL_ID=${{ secrets.GH_INSTALL_ID }}"
          export "VAULT_ADDRESS=http://vault.default:8200"
          export "VAULT_ROLE_AUDIENCE=githubapp"
          export "VAULT_ROLE=githubapp"
          USE_EXISTING_CLUSTER=true make test
      - name: Report failure
        uses: nashmaniac/create-issue-action@v1.2
        # Only report failures of pushes (PRs have are visible through the Checks section) to the default branch
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          title: 🐛 Unit tests failed on ${{ matrix.os }} for ${{ github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          labels: kind/bug
          body: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      - name: Send the coverage output
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: cover.out
